---
- name: Deploy Cisco AppDynamics Distribution of OpenTelemetry Collector
  hosts: all
  become: yes
  vars_files:
    - variables.yaml  # Include the variable file

  tasks:
    - name: Ensure required packages are installed (RedHat)
      yum:
        name:
          - yum-utils
        state: present
        update_cache: yes
      when: ansible_os_family == "RedHat"

    - name: Ensure required packages are installed (Debian)
      apt:
        name:
          - curl
          - debian-archive-keyring
          - apt-transport-https
          - software-properties-common
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Ensure the directory exists
      file:
        path: /opt/appdynamics/appdsmartagent
        state: directory
        mode: '0755'

    - name: Check if config.ini exists
      stat:
        path: /opt/appdynamics/appdsmartagent/config.ini
      register: stat_config

    - name: Create default config.ini file if it doesn't exist
      copy:
        dest: /opt/appdynamics/appdsmartagent/config.ini
        mode: '0644'
        content: |
          [default]
          AccountAccessKey="{{ smart_agent.account_access_key }}"
          ControllerURL="{{ smart_agent.controller_url }}"
          ControllerPort=443
          AccountName="{{ smart_agent.account_name }}"
          FMServicePort={{ smart_agent.fm_service_port }}
          EnableSSL={{ smart_agent.ssl | ternary('true', 'false') }}
      when: not stat_config.stat.exists

    - name: Configure Smart Agent
      lineinfile:
        path: /opt/appdynamics/appdsmartagent/config.ini
        regexp: '^{{ item.key }}='
        line: "{{ item.key }}={{ item.value }}"
      loop:
        - { key: 'AccountAccessKey', value: "{{ smart_agent.account_access_key }}" }
        - { key: 'ControllerURL', value: "{{ smart_agent.controller_url }}" }
        - { key: 'AccountName', value: "{{ smart_agent.account_name }}" }
        - { key: 'FMServicePort', value: "{{ smart_agent.fm_service_port }}" }
        - { key: 'EnableSSL', value: "{{ smart_agent.ssl | ternary('true', 'false') }}" }

    - name: Set the Smart Agent package path (Debian)
      set_fact:
        smart_agent_package: "{{ playbook_dir }}/appdsmartagent_64_linux_24.6.0.2143.deb"
      when: ansible_os_family == "Debian"

    - name: Set the Smart Agent package path (RedHat)
      set_fact:
        smart_agent_package: "{{ playbook_dir }}/appdsmartagent_64_linux_24.6.0.2143.rpm"
      when: ansible_os_family == "RedHat"

    - name: Fail if Smart Agent package not found (Debian)
      fail:
        msg: "Smart Agent package not found for Debian."
      when: ansible_os_family == "Debian" and not (smart_agent_package is defined and smart_agent_package is file)

    - name: Fail if Smart Agent package not found (RedHat)
      fail:
        msg: "Smart Agent package not found for RedHat."
      when: ansible_os_family == "RedHat" and not (smart_agent_package is defined and smart_agent_package is file)

    - name: Copy Smart Agent package to target (Debian)
      copy:
        src: "{{ smart_agent_package }}"
        dest: "/tmp/{{ smart_agent_package | basename }}"
      when: ansible_os_family == "Debian"

    - name: Install Smart Agent package (Debian)
      command: dpkg -i /tmp/{{ smart_agent_package | basename }}
      when: ansible_os_family == "Debian"

    - name: Copy Smart Agent package to target (RedHat)
      copy:
        src: "{{ smart_agent_package }}"
        dest: "/tmp/{{ smart_agent_package | basename }}"
      when: ansible_os_family == "RedHat"

    - name: Install Smart Agent package (RedHat)
      yum:
        name: "/tmp/{{ smart_agent_package | basename }}"
        state: present
        disable_gpg_check: yes
      when: ansible_os_family == "RedHat"
      
    - name: Restart Smart Agent service
      service:
        name: smartagent
        state: restarted

    - name: Clean up temporary files
      file:
        path: "/tmp/{{ smart_agent_package | basename }}"
        state: absent
